/**
 * Kafka Exception Handling
 * This is an application to show kafka data.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: balu.vyamajala@amway.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs/Observable';

import { PartitionOffset } from '../model/partitionOffset';
import { Topic } from '../model/topic';
import { UtilService } from '../services/util/util.service';
import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable()
export class TopicsService {

    protected basePath = '/api';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional() configuration: Configuration) {
        this.basePath = UtilService.getBaseUrl() + this.basePath;

        if (configuration) {
            this.configuration = configuration;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (let consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * Delete a topic
     * Delete a topic
     * @param topicName topic name
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public _delete(topicName: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public _delete(topicName: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public _delete(topicName: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public _delete(topicName: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (topicName === null || topicName === undefined) {
            throw new Error('Required parameter topicName was null or undefined when calling _delete.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (topicName !== undefined) {
            queryParameters = queryParameters.set('topicName', <any>topicName);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.delete<any>(`${this.basePath}/topic`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Create a topic
     * Create a topic
     * @param topicName topic name
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public create(topicName: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public create(topicName: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public create(topicName: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public create(topicName: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (topicName === null || topicName === undefined) {
            throw new Error('Required parameter topicName was null or undefined when calling create.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (topicName !== undefined) {
            queryParameters = queryParameters.set('topicName', <any>topicName);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.post<any>(`${this.basePath}/topic`,
            null,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get Topic Info
     * Returns a Topic data
     * @param topicName topicName
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public get(topicName: string, observe?: 'body', reportProgress?: boolean): Observable<Topic>;
    public get(topicName: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Topic>>;
    public get(topicName: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Topic>>;
    public get(topicName: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (topicName === null || topicName === undefined) {
            throw new Error('Required parameter topicName was null or undefined when calling get.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (topicName !== undefined) {
            queryParameters = queryParameters.set('topicName', <any>topicName);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.get<Topic>(`${this.basePath}/topic`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get all Topics as List
     * Returns a List of Topics
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getAll(observe?: 'body', reportProgress?: boolean): Observable<Array<Topic>>;
    public getAll(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<Topic>>>;
    public getAll(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<Topic>>>;
    public getAll(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.get<Array<Topic>>(`${this.basePath}/topic/getAll`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get Topic Offsets
     * Returns a List of Topics
     * @param bgngOrEdng Beggining or Ending
     * @param topic input name and Partitions of Topic
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getOffsets(bgngOrEdng: string, topic: Topic, observe?: 'body', reportProgress?: boolean): Observable<Array<PartitionOffset>>;
    public getOffsets(bgngOrEdng: string, topic: Topic, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<PartitionOffset>>>;
    public getOffsets(bgngOrEdng: string, topic: Topic, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<PartitionOffset>>>;
    public getOffsets(bgngOrEdng: string, topic: Topic, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (bgngOrEdng === null || bgngOrEdng === undefined) {
            throw new Error('Required parameter bgngOrEdng was null or undefined when calling getOffsets.');
        }
        if (topic === null || topic === undefined) {
            throw new Error('Required parameter topic was null or undefined when calling getOffsets.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (bgngOrEdng !== undefined) {
            queryParameters = queryParameters.set('bgngOrEdng', <any>bgngOrEdng);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];
        let httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set("Content-Type", httpContentTypeSelected);
        }

        return this.httpClient.post<Array<PartitionOffset>>(`${this.basePath}/topic/offsets`,
            topic,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
